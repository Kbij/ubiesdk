//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef MOCK_SMOKECOIF_H_
#define MOCK_SMOKECOIF_H_

#include "Sdk/Fb/SmokeCoIf.h"
#include "gtest/gtest.h"
#include "gmock/gmock.h"

#include <vector>
#include <map>


namespace SdkNs
{
class SmokeCoMock: public SdkNs::SmokeCoIf
{
public:
	MOCK_CONST_METHOD0(id, std::string());
	MOCK_CONST_METHOD0(name, std::string());
	MOCK_METHOD1(name, void(const std::string& name));
	MOCK_METHOD1(variant, void(const std::string& variant));
	MOCK_CONST_METHOD0(location, std::string());
	MOCK_METHOD1(location, void(const std::string& location));
	MOCK_METHOD1(locationId, void(int locationId));
	MOCK_METHOD1(refId, void(const std::string& refId));
	MOCK_METHOD0(commit, void());
	MOCK_METHOD3(cloudMessage, void(SdkNs::SdkMessageLevel, const std::string& , const std::map<int, std::string>& ));
	MOCK_METHOD1(registerClient, void(SdkNs::SmokeCoClientIf*));
	MOCK_METHOD0(unRegisterClient, void());

	MOCK_METHOD1(battAlarm, void(bool ubieValue));

	MOCK_METHOD1(battAlarmConfig, void(const SdkNs::SmokeCoDef::battAlarmConf& conf));

	MOCK_METHOD1(coAlarm, void(bool ubieValue));

	MOCK_METHOD1(coAlarmConfig, void(const SdkNs::SmokeCoDef::coAlarmConf& conf));

	MOCK_METHOD1(colorState, void(std::string ubieValue));

	MOCK_METHOD1(colorStateConfig, void(const SdkNs::SmokeCoDef::colorStateConf& conf));

	MOCK_METHOD1(smokeAlarm, void(bool ubieValue));

	MOCK_METHOD1(smokeAlarmConfig, void(const SdkNs::SmokeCoDef::smokeAlarmConf& conf));

	MOCK_METHOD1(commitHistory, void(const std::vector<SdkNs::SmokeCoDef::HistoryState>&));
};
}
#endif /* MOCK_SMOKECOIF_H_ */
