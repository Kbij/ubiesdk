//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_MULTICOLORIF_H_
#define FUNCTIONBLOCKS_MULTICOLORIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "MultiColorDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::MultiColorIf
 * \brief
 * 
 * Properties:
 *  - brightness
 *  - currRegime
 *  - hue
 *  - on
 *  - presetColor
 *  - presetMovie
 *  - saturation

 */

namespace SdkNs {
class MultiColorClientIf;

class MultiColorIf: public FunctionBlockIf
{
public:
	virtual ~MultiColorIf() {};

	/**
	 * Register a client that will listen to events from this MultiColor FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(MultiColorClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the MultiColor FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void brightness(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void brightnessConfig(const SdkNs::MultiColorDef::brightnessConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud  Possible values: "ColorSelect", "ColorWheel", "MovieSelect"
	 */
	virtual void currRegime(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void currRegimeConfig(const SdkNs::MultiColorDef::currRegimeConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void hue(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void hueConfig(const SdkNs::MultiColorDef::hueConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void on(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void onConfig(const SdkNs::MultiColorDef::onConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void presetColor(int ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void presetColorConfig(const SdkNs::MultiColorDef::presetColorConf& conf) = 0;

	/**
	 * Register the preset value list for the PresetColor property
	 * @param presetValues The preset values for the property
	 */
	virtual void registerPresetColorValues(const std::vector<SdkNs::MultiColorDef::PresetColorValue>& presetValues) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void presetMovie(int ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void presetMovieConfig(const SdkNs::MultiColorDef::presetMovieConf& conf) = 0;

	/**
	 * Register the preset value list for the PresetMovie property
	 * @param presetValues The preset values for the property
	 */
	virtual void registerPresetMovieValues(const std::vector<SdkNs::MultiColorDef::PresetMovieValue>& presetValues) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void saturation(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void saturationConfig(const SdkNs::MultiColorDef::saturationConf& conf) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::MultiColorDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_MULTICOLORIF_H_ */
