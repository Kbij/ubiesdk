//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/* 
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCK_DEFINITIONS_HEALTHBOXROOMIF_H_
#define FUNCTIONBLOCK_DEFINITIONS_HEALTHBOXROOMIF_H_
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

namespace SdkNs {
namespace HealthBoxRoomDef
{

    struct boostRemainingConf
    {
        boostRemainingConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "boostRemaining" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "boostRemaining" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "boostRemaining" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "boostRemaining"
         */
        boost::optional<int> min;
        /**
         * The maximum value of property "boostRemaining"
         */
        boost::optional<int> max;
        /**
         * The step value of property "boostRemaining"
         */
        boost::optional<int> step;
        /**
         * The unit value of property "boostRemaining"
         */
        boost::optional<std::string> unit;

    };

    struct boostTimeoutConf
    {
        boostTimeoutConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "boostTimeout" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "boostTimeout" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "boostTimeout" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "boostTimeout"
         */
        boost::optional<int> min;
        /**
         * The maximum value of property "boostTimeout"
         */
        boost::optional<int> max;
        /**
         * The step value of property "boostTimeout"
         */
        boost::optional<int> step;
        /**
         * The unit value of property "boostTimeout"
         */
        boost::optional<std::string> unit;

    };

    struct boostValueConf
    {
        boostValueConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "boostValue" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "boostValue" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "boostValue" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "boostValue"
         */
        boost::optional<int> min;
        /**
         * The maximum value of property "boostValue"
         */
        boost::optional<int> max;
        /**
         * The step value of property "boostValue"
         */
        boost::optional<int> step;
        /**
         * The unit value of property "boostValue"
         */
        boost::optional<std::string> unit;

    };

    struct currentFlowRateConf
    {
        currentFlowRateConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "currentFlowRate" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "currentFlowRate" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "currentFlowRate" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "currentFlowRate"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "currentFlowRate"
         */
        boost::optional<double> max;
        /**
         * The step value of property "currentFlowRate"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "currentFlowRate"
         */
        boost::optional<std::string> unit;

    };

    struct HistoryState
    {
        HistoryState():  timeUTC(), boostRemaining(), boostTimeout(), boostValue(), currentFlowRate() {};

        /**
         * The epoch time of this event
         */
        time_t timeUTC;
	    boost::optional<int> boostRemaining;
	    boost::optional<int> boostTimeout;
	    boost::optional<int> boostValue;
	    boost::optional<double> currentFlowRate;

    };
}
}
#endif
