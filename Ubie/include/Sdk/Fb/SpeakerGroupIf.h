//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_SPEAKERGROUPIF_H_
#define FUNCTIONBLOCKS_SPEAKERGROUPIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "SpeakerGroupDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::SpeakerGroupIf
 * \brief
 * Represents a group of speakers
 * Properties:
 *  - album
 *  - members
 *  - mute
 *  - playState
 *  - source
 *  - title
 *  - volume
 * Actions:
 *  - allOff
 *  - next
 *  - prev
 *  - volumeDown
 *  - volumeUp

 */

namespace SdkNs {
class SpeakerGroupClientIf;

class SpeakerGroupIf: public FunctionBlockIf
{
public:
	virtual ~SpeakerGroupIf() {};

	/**
	 * Register a client that will listen to events from this SpeakerGroup FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(SpeakerGroupClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the SpeakerGroup FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. The album art of the current playing music. Can be jpg or png.
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void album(std::vector<uint8_t> ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void albumConfig(const SdkNs::SpeakerGroupDef::albumConf& conf) = 0;

	/**
	 * Send value to the cloud. A list (comma separated) of Id's of all the speakers present in this group.
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void members(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void membersConfig(const SdkNs::SpeakerGroupDef::membersConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void mute(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void muteConfig(const SdkNs::SpeakerGroupDef::muteConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud  Possible values: "Play", "Pause", "Stop"
	 */
	virtual void playState(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void playStateConfig(const SdkNs::SpeakerGroupDef::playStateConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void title(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void titleConfig(const SdkNs::SpeakerGroupDef::titleConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void volume(int ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void volumeConfig(const SdkNs::SpeakerGroupDef::volumeConf& conf) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerGroupClientIf::allOff(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void allOffCompleted(bool success) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerGroupClientIf::next(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void nextCompleted(bool success) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerGroupClientIf::prev(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void prevCompleted(bool success) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerGroupClientIf::volumeDown(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void volumeDownCompleted(bool success) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerGroupClientIf::volumeUp(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void volumeUpCompleted(bool success) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::SpeakerGroupDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_SPEAKERGROUPIF_H_ */
