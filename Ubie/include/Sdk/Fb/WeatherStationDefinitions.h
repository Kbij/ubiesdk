//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/* 
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCK_DEFINITIONS_WEATHERSTATIONIF_H_
#define FUNCTIONBLOCK_DEFINITIONS_WEATHERSTATIONIF_H_
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

namespace SdkNs {
namespace WeatherStationDef
{

    struct dayLightConf
    {
        dayLightConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "dayLight" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "dayLight" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "dayLight" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "dayLight"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "dayLight"
         */
        boost::optional<double> max;
        /**
         * The step value of property "dayLight"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "dayLight"
         */
        boost::optional<std::string> unit;

    };

    struct lightConf
    {
        lightConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "light" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "light" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "light" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "light"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "light"
         */
        boost::optional<double> max;
        /**
         * The step value of property "light"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "light"
         */
        boost::optional<std::string> unit;

    };

    struct lightEastConf
    {
        lightEastConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "lightEast" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "lightEast" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "lightEast" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "lightEast"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "lightEast"
         */
        boost::optional<double> max;
        /**
         * The step value of property "lightEast"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "lightEast"
         */
        boost::optional<std::string> unit;

    };

    struct lightSouthConf
    {
        lightSouthConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "lightSouth" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "lightSouth" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "lightSouth" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "lightSouth"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "lightSouth"
         */
        boost::optional<double> max;
        /**
         * The step value of property "lightSouth"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "lightSouth"
         */
        boost::optional<std::string> unit;

    };

    struct lightWestConf
    {
        lightWestConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "lightWest" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "lightWest" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "lightWest" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "lightWest"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "lightWest"
         */
        boost::optional<double> max;
        /**
         * The step value of property "lightWest"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "lightWest"
         */
        boost::optional<std::string> unit;

    };

    struct rainingConf
    {
        rainingConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "raining" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "raining" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "raining" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct temperatureConf
    {
        temperatureConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "temperature" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "temperature" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "temperature" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "temperature"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "temperature"
         */
        boost::optional<double> max;
        /**
         * The step value of property "temperature"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "temperature"
         */
        boost::optional<std::string> unit;

    };

    struct twilightConf
    {
        twilightConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "twilight" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "twilight" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "twilight" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct windConf
    {
        windConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "wind" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "wind" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "wind" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "wind"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "wind"
         */
        boost::optional<double> max;
        /**
         * The step value of property "wind"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "wind"
         */
        boost::optional<std::string> unit;

    };

    struct HistoryState
    {
        HistoryState():  timeUTC(), dayLight(), light(), lightEast(), lightSouth(), lightWest(), raining(), temperature(), twilight(), wind() {};

        /**
         * The epoch time of this event
         */
        time_t timeUTC;
	    boost::optional<double> dayLight;
	    boost::optional<double> light;
	    boost::optional<double> lightEast;
	    boost::optional<double> lightSouth;
	    boost::optional<double> lightWest;
	    boost::optional<bool> raining;
	    boost::optional<double> temperature;
	    boost::optional<bool> twilight;
	    boost::optional<double> wind;

    };
}
}
#endif
