//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_ANALOGIF_H_
#define FUNCTIONBLOCKS_ANALOGIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "AnalogDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::AnalogIf
 * \brief
 * Represents a component with a value ranging from 0 - 100%. Typicaly a dimmer.
 * Properties:
 *  - value
 * Actions:
 *  - off
 *  - on

 */

namespace SdkNs {
class AnalogClientIf;

class AnalogIf: public FunctionBlockIf
{
public:
	virtual ~AnalogIf() {};

	/**
	 * Register a client that will listen to events from this Analog FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(AnalogClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the Analog FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. Represents the analog value ranging from 0..100%. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void value(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void valueConfig(const SdkNs::AnalogDef::valueConf& conf) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the AnalogClientIf::off(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void offCompleted(bool success) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the AnalogClientIf::on(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void onCompleted(bool success) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::AnalogDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_ANALOGIF_H_ */
