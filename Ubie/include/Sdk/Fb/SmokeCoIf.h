//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_SMOKECOIF_H_
#define FUNCTIONBLOCKS_SMOKECOIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "SmokeCoDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::SmokeCoIf
 * \brief
 * 
 * Properties:
 *  - battAlarm
 *  - coAlarm
 *  - colorState
 *  - smokeAlarm

 */

namespace SdkNs {
class SmokeCoClientIf;

class SmokeCoIf: public FunctionBlockIf
{
public:
	virtual ~SmokeCoIf() {};

	/**
	 * Register a client that will listen to events from this SmokeCo FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(SmokeCoClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the SmokeCo FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void battAlarm(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void battAlarmConfig(const SdkNs::SmokeCoDef::battAlarmConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void coAlarm(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void coAlarmConfig(const SdkNs::SmokeCoDef::coAlarmConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud  Possible values: "gray", "green", "yellow", "red"
	 */
	virtual void colorState(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void colorStateConfig(const SdkNs::SmokeCoDef::colorStateConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void smokeAlarm(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void smokeAlarmConfig(const SdkNs::SmokeCoDef::smokeAlarmConf& conf) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::SmokeCoDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_SMOKECOIF_H_ */
