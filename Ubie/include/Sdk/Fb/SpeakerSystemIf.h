//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_SPEAKERSYSTEMIF_H_
#define FUNCTIONBLOCKS_SPEAKERSYSTEMIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "SpeakerSystemDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::SpeakerSystemIf
 * \brief
 * Represents a speaker system.
 * Properties:
 *  - alias
 *  - favorites
 *  - members
 * Actions:
 *  - createGroup

 */

namespace SdkNs {
class SpeakerSystemClientIf;

class SpeakerSystemIf: public FunctionBlockIf
{
public:
	virtual ~SpeakerSystemIf() {};

	/**
	 * Register a client that will listen to events from this SpeakerSystem FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(SpeakerSystemClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the SpeakerSystem FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. Value needs to be a valid json.
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void favorites(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void favoritesConfig(const SdkNs::SpeakerSystemDef::favoritesConf& conf) = 0;

	/**
	 * Send value to the cloud. A list (comma separated) of Id's of all the groups present in this system.
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void members(std::string ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void membersConfig(const SdkNs::SpeakerSystemDef::membersConf& conf) = 0;

	/**
	 * Notify the Sdk that the action was completed; this will cancel the timeout returned in the SpeakerSystemClientIf::createGroup(const std::set<std::string>& properties) call
	 * @param success The action was successfull or not
	 */
	virtual void createGroupCompleted(bool success) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::SpeakerSystemDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_SPEAKERSYSTEMIF_H_ */
