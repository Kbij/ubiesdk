//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/* 
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCK_DEFINITIONS_WARMWCOLDWIF_H_
#define FUNCTIONBLOCK_DEFINITIONS_WARMWCOLDWIF_H_
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

namespace SdkNs {
namespace WarmWColdWDef
{

    struct brightnessConf
    {
        brightnessConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "brightness" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "brightness" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "brightness" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "brightness"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "brightness"
         */
        boost::optional<double> max;
        /**
         * The step value of property "brightness"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "brightness"
         */
        boost::optional<std::string> unit;

    };

    struct currRegimeConf
    {
        currRegimeConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "currRegime" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "currRegime" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "currRegime" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct onConf
    {
        onConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "on" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "on" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "on" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct presetColorConf
    {
        presetColorConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "presetColor" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "presetColor" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "presetColor" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct presetMovieConf
    {
        presetMovieConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "presetMovie" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "presetMovie" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "presetMovie" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct temperatureConf
    {
        temperatureConf(): available(), readAllowed(), writeAllowed(), min(), max(), step(), unit() {};
        /**
         * Is the property "temperature" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "temperature" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "temperature" writable
         */
        boost::optional<bool> writeAllowed;

        /**
         * The minimum value of property "temperature"
         */
        boost::optional<double> min;
        /**
         * The maximum value of property "temperature"
         */
        boost::optional<double> max;
        /**
         * The step value of property "temperature"
         */
        boost::optional<double> step;
        /**
         * The unit value of property "temperature"
         */
        boost::optional<std::string> unit;

    };

    struct HistoryState
    {
        HistoryState():  timeUTC(), brightness(), currRegime(), on(), presetColor(), presetMovie(), temperature() {};

        /**
         * The epoch time of this event
         */
        time_t timeUTC;
	    boost::optional<double> brightness;
	    boost::optional<std::string> currRegime;
	    boost::optional<bool> on;
	    boost::optional<int> presetColor;
	    boost::optional<int> presetMovie;
	    boost::optional<double> temperature;

    };

    struct PresetColorValue
    {
        PresetColorValue(): value(), name(), extra()
        {}
        /* The value of the preset */
        int value;
        /* The name of the preset */
        std::string name;
        /* Json String containing extra information */
        std::string extra;
    };

    struct PresetMovieValue
    {
        PresetMovieValue(): value(), name(), extra()
        {}
        /* The value of the preset */
        int value;
        /* The name of the preset */
        std::string name;
        /* Json String containing extra information */
        std::string extra;
    };
}
}
#endif
