//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/* 
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCK_DEFINITIONS_SMOKECOIF_H_
#define FUNCTIONBLOCK_DEFINITIONS_SMOKECOIF_H_
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

namespace SdkNs {
namespace SmokeCoDef
{

    struct battAlarmConf
    {
        battAlarmConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "battAlarm" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "battAlarm" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "battAlarm" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct coAlarmConf
    {
        coAlarmConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "coAlarm" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "coAlarm" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "coAlarm" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct colorStateConf
    {
        colorStateConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "colorState" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "colorState" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "colorState" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct smokeAlarmConf
    {
        smokeAlarmConf(): available(), readAllowed(), writeAllowed() {};
        /**
         * Is the property "smokeAlarm" available (does this functionblock implement this property)
         */
        boost::optional<bool> available;
        /**
         * is the value of property "smokeAlarm" readable
         */
        boost::optional<bool> readAllowed;
        /**
         * is the value of property "smokeAlarm" writable
         */
        boost::optional<bool> writeAllowed;

    };

    struct HistoryState
    {
        HistoryState():  timeUTC(), battAlarm(), coAlarm(), colorState(), smokeAlarm() {};

        /**
         * The epoch time of this event
         */
        time_t timeUTC;
	    boost::optional<bool> battAlarm;
	    boost::optional<bool> coAlarm;
	    boost::optional<std::string> colorState;
	    boost::optional<bool> smokeAlarm;

    };
}
}
#endif
