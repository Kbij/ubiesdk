//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_WEATHERSTATIONIF_H_
#define FUNCTIONBLOCKS_WEATHERSTATIONIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "WeatherStationDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::WeatherStationIf
 * \brief
 * 
 * Properties:
 *  - dayLight
 *  - light
 *  - lightEast
 *  - lightSouth
 *  - lightWest
 *  - raining
 *  - temperature
 *  - twilight
 *  - wind

 */

namespace SdkNs {
class WeatherStationClientIf;

class WeatherStationIf: public FunctionBlockIf
{
public:
	virtual ~WeatherStationIf() {};

	/**
	 * Register a client that will listen to events from this WeatherStation FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(WeatherStationClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the WeatherStation FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void dayLight(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void dayLightConfig(const SdkNs::WeatherStationDef::dayLightConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void light(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void lightConfig(const SdkNs::WeatherStationDef::lightConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void lightEast(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void lightEastConfig(const SdkNs::WeatherStationDef::lightEastConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void lightSouth(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void lightSouthConfig(const SdkNs::WeatherStationDef::lightSouthConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void lightWest(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void lightWestConfig(const SdkNs::WeatherStationDef::lightWestConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void raining(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void rainingConfig(const SdkNs::WeatherStationDef::rainingConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void temperature(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void temperatureConfig(const SdkNs::WeatherStationDef::temperatureConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void twilight(bool ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void twilightConfig(const SdkNs::WeatherStationDef::twilightConf& conf) = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void wind(double ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void windConfig(const SdkNs::WeatherStationDef::windConf& conf) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::WeatherStationDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_WEATHERSTATIONIF_H_ */
