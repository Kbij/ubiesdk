//File generated by Functionblock Generator
// !!!! DO NOT EDIT MANUALLY !!!!
/*
 * Copyright 2018 Qbus n.v.
 */

#ifndef FUNCTIONBLOCKS_SPEAKERIF_H_
#define FUNCTIONBLOCKS_SPEAKERIF_H_
#include "Sdk/FunctionBlockIf.h"
#include "SpeakerDefinitions.h"
#include <string>
#include <set>
#include <vector>
#include <stdint.h>
#include <boost/optional.hpp>

/**
 * \class SdkNs::SpeakerIf
 * \brief
 * Represents a individual speaker. Typically the master speaker in a stereo pair.
 * Properties:
 *  - volume

 */

namespace SdkNs {
class SpeakerClientIf;

class SpeakerIf: public FunctionBlockIf
{
public:
	virtual ~SpeakerIf() {};

	/**
	 * Register a client that will listen to events from this Speaker FunctionBlock
	 * @param client Pointer of the client
	 */
	virtual void registerClient(SpeakerClientIf* client) = 0;

	/**
	 * Unregister the client that will listen to events of the Speaker FunctionBlock
	 */
	virtual void unRegisterClient() = 0;

	/**
	 * Send value to the cloud. 
	 * @param ubieValue The Value to send to the cloud 
	 */
	virtual void volume(int ubieValue) = 0;

	/**
	 * Set the configuration of this property (read, write, step, unit)
	 * @param conf The configuration of the property
	 */
	virtual void volumeConfig(const SdkNs::SpeakerDef::volumeConf& conf) = 0;

	/**
	 * Send a user message to the cloud, the message concerns this functionblock
	 * @param level Message severity level
	 * @param id The id of the message (messages.json)
	 * @param dataFields Zero or more fields that will we inserted in the message
	 */
	virtual void cloudMessage(SdkMessageLevel level, const std::string& id, const std::map<int, std::string>& dataFields) = 0;

	/**
	 * Commit history
	 * @param historyState A vector of history states
	 */
	virtual void commitHistory(const std::vector<SdkNs::SpeakerDef::HistoryState>& historyState) = 0;
};
}

#endif /* FUNCTIONBLOCKS_SPEAKERIF_H_ */
